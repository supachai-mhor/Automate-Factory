@model AutomateBussiness.Models.Movie

@{
	ViewData["Title"] = "Monitoring";
	Layout = "~/Views/Shared/_Layout_Dashboard.cshtml";
	var ListMachineModel = ViewBag.ListMachineModel;
}

<script>
	document.getElementById("HeaderTopic").innerHTML = "Monitoring";
</script>

<head>
	<style>
		.mainWrapper {
			width: 840px;
			height: 820px;
			background: white;
			margin-left: auto;
			margin-right: auto;
			position: relative;
			left: 0px;
		}

		#cc1 {
			position: absolute;
			/*background: #004c4c;linear-gradient(to top, #004c4c 80%, #006064 80%, #006064 100%);*/
			margin-top: 0px;
			margin-left: 0px;
			width: 840px;
			height: 240px;
		}

		#cc2 {
			position: absolute;
			background: white;
			margin-top: 240px;
			margin-left: 0px;
			width: 340px;
			height: 350px;
		}

		#cc3 {
			position: absolute;
			background: white;
			margin-top: 240px;
			margin-left: 340px;
			width: 500px;
			height: 350px;
		}

		#cc4 {
			position: absolute;
			background: white;
			margin-top: 590px;
			margin-left: 0px;
			width: 825px;
			height: 280px;
		}
	</style>

	<script>

		window.onload = function () {

		// initial value
		@*var yValue1 = @Html.Raw(ViewBag.YValue1);
		var yValue2 = @Html.Raw(ViewBag.YValue2);
		var time = new Date(@Html.Raw(ViewBag.Time));
		var updateInterval = @Html.Raw(ViewBag.UpdateInterval);


		var dataPoints1 = @Html.Raw(ViewBag.DataPoints1);
		var dataPoints2 = @Html.Raw(ViewBag.DataPoints2);*@

		@*var chart = new CanvasJS.Chart("chartContainer", {
			zoomEnabled: true,
			title: {
				text: "Reading From Two Sensor"
			},
			axisX: {
				title: "chart updates every 2 secs",
				crosshair: {
					enabled: true,
					snapToDataPoint: true
				}
			},
			axisY: {
				includeZero: false,
				crosshair: {
					enabled: true,
					snapToDataPoint: true,
					valueFormatString: "#,##0"
				}
			},
			toolTip: {
				shared: true
			},
			legend: {
				dockInsidePlotArea: true,
				verticalAlign: "top",
				horizontalAlign: "right"
			},
			data: [{
				type: "line",
				markerType: "none",
				xValueType: "dateTime",
				xValueFormatString: "hh:mm:ss TT",
				name: "Sensor 1",
				showInLegend: true,
				dataPoints: dataPoints1
			},
			{
				type: "line",
				markerType: "none",
				xValueType: "dateTime",
				name: "Sensor 2",
				showInLegend: true,
				dataPoints: dataPoints2
			}]
		});

		chart.render();

		function toggleDataSeries(e) {
			if (typeof (e.dataSeries.visible) === "undefined" || e.dataSeries.visible) {
				e.dataSeries.visible = false;
			}
			else {
				e.dataSeries.visible = true;
			}
			chart.render();
		}

		var updateInterval = @Html.Raw(ViewBag.UpdateInterval);
		// initial value
		var yValue1 = @Html.Raw(ViewBag.YValue1);
		var yValue2 = @Html.Raw(ViewBag.YValue2);

		var time = new Date(@Html.Raw(ViewBag.Time));

		function updateChart(count) {
			count = count || 1;
			var deltaY1, deltaY2;
			for (var i = 0; i < count; i++) {
                time.setTime(time.getTime() + updateInterval);

				var dataSensorFromClienct = Number(document.getElementById("inputCount").innerHTML);
				if (!Number.isNaN(dataSensorFromClienct)) {
					deltaY1 = dataSensorFromClienct;
				} else {
					deltaY1 = 0;
                }

				var dataSensorFromClienct2 = Number(document.getElementById("passCount").innerHTML);
				if (!Number.isNaN(dataSensorFromClienct2)) {
					deltaY2 = dataSensorFromClienct2;
				} else {
					deltaY2 = 0;
				}

				// adding random value and rounding it to two digits.
				yValue1 = Math.round((deltaY1) * 100) / 100;
				yValue2 = Math.round((deltaY2) * 100) / 100;

				// pushing the new values
				dataPoints1.push({
					x: time.getTime(),
					y: yValue1
                });
				dataPoints2.push({
					x: time.getTime(),
					y: yValue2
                });

                dataPoints1.shift();
				dataPoints2.shift();
			}

			chart.render();
            }*@


        //setInterval(function () {

        //    updateChart()


        //}, updateInterval);



        }

	</script>
</head>

<input type="hidden" value="@ViewBag.token" id="tokenData" />

<div>
	<p id="inputCount"></p>
	<p id="passCount"></p>
	<p id="demo"></p>
</div>



@*<h1>ChatViewPage</h1>*@

<div class="row">
	<h5 class="col-">Machine:</h5>

	<select id="machineName" asp-items="ListMachineModel" class="col-sm-2"></select>

	@*<input class="col-sm-2" type="text" value="Packing 01" id="machineName" />*@

<select id="SelectTiggerTimes" class="col-sm-2">
    <option value="5" selected>every 5 sec</option>
    <option value="30">every 30 sec</option>
    <option value="60">every 1 min</option>
    <option value="180">every 3 min</option>
    <option value="300">every 5 min</option>
    <option value="600">every 10 min</option>
    <option value="900">every 15 min</option>
    <option value="1800">every 30 min</option>
</select>

	<input class="btn-primary col-sm-2" type="button" id="startRealtime" value="Start" />
	<input class="btn-primary col-sm-2" type="button" id="stopRealtime" value="Stop" />
</div>

<div class="row">
	<br />
</div>

<div class="row">
	<p class="col-sm-12" id="monitoringStatus" style="background-color: darkgrey; padding: 10px; text-align: center; font-size: 30px; animation: blinkDisconnecting 2s infinite;">Monitoring Status</p>
</div>

@*<div class="row">
	<div class="col-sm-4" style="background-color:lightblue; color:blue;padding: 10px; border-radius: 10px; outline-offset:10px;">
		<h6>JobNumber:</h6>
		<h6 id="JobNumber" style="text-align:center;"></h6>
	</div>
	<div class="col-sm-4" style="background-color:lightblue; color:blue;padding: 10px; border-radius: 10px; outline-offset:10px;">
		<h6>Operator:</h6>
		<h6 id="Operator" style="text-align:center;"></h6>
	</div>
	<div class="col-sm-4" style="background-color:lightblue; color:blue;padding: 10px; border-radius: 10px; outline-offset:10px;">
		<h6>Supervisor:</h6>
		<h6 id="Supervisor" style="text-align:center;"></h6>
	</div>
</div>*@

@*<div class="row">
		<div class="col-6">
			<ul id="messagesList"></ul>
		</div>
	</div>*@
@*<div class="row">
		<div class="col-sm-3" style="background-color:deepskyblue; padding: 10px; border-radius: 10px; outline-offset:10px;">
			<h3>INPUT</h3>
			<h4 id="totalInputText" style="text-align:right;">0</h4>



		</div>
		<div class="col-sm-3" style="background-color:lawngreen; padding: 10px; border-radius: 10px; outline-offset:10px;">
			<h3>PASS</h3>
			<h4 id="totalPassText" style="text-align:right;">0</h4>


		</div>
		<div class="col-sm-3" style="background-color:burlywood; padding: 10px; border-radius: 10px; outline-offset:10px;">
			<h3>YIELD</h3>
			<h4 id="yieldText" style="text-align:right;">0.00%</h4>

		</div>
		<div class="col-sm-3" style="background-color:burlywood; padding: 10px; border-radius: 10px; outline-offset:10px;">
			<h3>OEE</h3>
			<h4 id="oeeText" style="text-align:right;">0.000%</h4>


		</div>
	</div>*@

<div class="row">
	<div id="cc1" style="width: 100%; height: 200px; position:relative;"></div>
</div>

<div class="row">

	<div class="col-sm-6" id="chartDiv" style="width: 50%; height: 500px;"></div>
	<div class="col-sm-6" id="chartDiv2" style="width: 50%; height: 500px;"></div>

</div>

<div class="row">
    <div class="col-sm-12" style="background-color:lightpink; color:red;padding: 10px; border-radius: 10px; outline-offset:10px;">
        <h6>Error Message:</h6>
        <ul id="ErrorMessage" style="text-align:left;"></ul>
    </div>
</div>


@*<div class="row">&nbsp;</div>
		<div class="row">
			<div class="col-6">

			</div>
		</div>
		<div class="row">
			<div class="col-6">

			</div>
		</div>
	</div>
	<div class="row">
		<div class="col-12">
			<hr />
		</div>
	</div>*@


@*<div class="row">
	<div class="col-6">
		<ul id="messagesList"></ul>
	</div>
</div>
<div class="container">
	<div class="row">&nbsp;</div>
	<div class="row">
		<div class="col-2">User</div>
		<div class="col-4"><input type="text" id="userInput" /></div>
	</div>
</div>
<div id="chartContainer" style="height: 370px; width: 100%;"></div>*@


<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>


<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>


